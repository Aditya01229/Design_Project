generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String  @id @default(uuid())
  fullName       String
  email          String  @unique
  phone          String
  graduationYear String?
  language       String?
  linkedin       String?
  skills         String?
  password       String
  userType       UserType

  // Fields only for alumni
  company  String?
  location String?

  createdAt DateTime @default(now())

  // Relations
  events Event[] @relation("EventOrganizer")
  jobs   Job[]   @relation("JobPoster")

  JobApplication JobApplication[]

  Like Like[]

  Comment Comment[]

  ActivityPost ActivityPost[]
}

model Event {
  id          String  @id @default(uuid())
  title       String
  description String
  date        DateTime
  location    String
  organizer   User    @relation("EventOrganizer", fields: [organizerId], references: [id])
  organizerId String
  createdAt   DateTime @default(now())
}

model Job {
  id          String  @id @default(uuid())
  title       String
  company     String
  location    String
  description String
  postedBy    User    @relation("JobPoster", fields: [postedById], references: [id])
  postedById  String
  createdAt   DateTime @default(now())

  JobApplication JobApplication[]
}

model JobApplication {
  id        String   @id @default(uuid())
  userId    String
  jobId     String
  user      User     @relation(fields: [userId], references: [id])
  job       Job      @relation(fields: [jobId], references: [id])
  createdAt DateTime @default(now())
}

model ActivityPost {
  id        String    @id @default(uuid())
  content   String
  imageUrl  String?
  createdAt DateTime  @default(now())
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  comments  Comment[]
  likes     Like[]
}

model Comment {
  id         String   @id @default(uuid())
  content    String
  createdAt  DateTime @default(now())
  post       ActivityPost @relation(fields: [postId], references: [id])
  postId     String
  author     User     @relation(fields: [authorId], references: [id])
  authorId   String
}

model Like {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  post       ActivityPost @relation(fields: [postId], references: [id])
  postId     String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
}



enum UserType {
  STUDENT
  ALUMNI
}


